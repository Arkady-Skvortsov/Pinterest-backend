import { ApiProperty } from '@nestjs/swagger';
import {
  Column,
  Entity,
  ManyToMany,
  OneToOne,
  PrimaryGeneratedColumn,
} from 'typeorm';
import UserEntity from './users.entity';
import { event } from '../dto/notification.dto';
import CommentEntity from './comment.entity';
import PinEntity from './pin.entity';
import { BoardEntity } from './board.entity';

@Entity({ name: 'notifications' })
export default class NotificationEntity {
  @ApiProperty({
    type: Number,
    example: 1,
    description: 'Autogenerated primary key',
  })
  @PrimaryGeneratedColumn()
  public id: number;

  @ApiProperty({
    type: String,
    example: 'На ваш комментарий ответили под постом "The last of us"',
    description: 'Text into current notification about some event',
  })
  @Column({ type: 'varchar', nullable: false })
  public text: string;

  @ApiProperty({
    type: String,
    example: 'Подписка',
    description: "Type of the event, like: 'Subscribe', 'Like', 'Comment'",
  })
  @Column({ type: 'varchar', nullable: false })
  public event: event;

  @ApiProperty({
    type: () => UserEntity,
    example: 'User, which catch that notification',
    description: 'Notifications, which has a user',
  })
  @ManyToMany(() => UserEntity, (user) => user.notifications)
  public users: UserEntity[];

  @ApiProperty({
    type: () => UserEntity,
    example: '"Author" of the current notification',
    description: 'Author, who has a sender of that notify',
  })
  @OneToOne(() => UserEntity, (user) => user.username)
  public author: UserEntity;

  // @ApiProperty({ type: () => BoardEntity, example: '', description: '' }) //Todo: DO migrations
  // @OneToOne(() => BoardEntity, (board) => board)
  // public board?: BoardEntity;

  // @ApiProperty({ type: () => PinEntity, example: '', description: '' })
  // @OneToOne(() => PinEntity, (pin) => pin)
  // public pin?: PinEntity;

  // @ApiProperty({ type: () => CommentEntity, example: '', description: '' })
  // @OneToOne(() => CommentEntity, (comment) => comment)
  // public comment?: CommentEntity;
}
